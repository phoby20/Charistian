generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  name          String
  birthDate     DateTime
  phone         String?
  kakaoId       String?
  lineId        String?
  address       String?
  country       String?
  region        String?
  city          String?
  gender        String
  profileImage  String?
  role          Role       @default(GENERAL)
  churchId      String?
  church        Church?    @relation(fields: [churchId], references: [id])
  groups        Group[]    @relation("UserGroups")
  subGroups     SubGroup[] @relation("UserSubGroups")
  teams         Team[]     @relation("UserTeams")
  duties        Duty[]     @relation("UserDuties") // 직책
  position      String?    // 직분 (예: 목사, 집사)
  creations     Creation[]
  purchases     Purchase[]
  state         UserState  @default(APPROVED)
  rejectionReason String?
  attendances   Attendance[] @relation("UserAttendance")
  checkedAttendances Attendance[] @relation("CheckedBy")
  createdEvents Event[]    @relation("EventCreator")
  attendees     EventAttendance[] // 이벤트 참여자
  userEventLabels UserEventLabel[] @relation("UserEventLabel") // 추가: 사용자별 라벨 관계
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Church {
  id                String    @id @default(uuid())
  name              String
  country           String
  city              String
  region            String
  address           String
  phone             String
  buildingImage     String?
  plan              Plan      @default(FREE)
  state             ChurchState @default(PENDING)
  users             User[]
  groups            Group[]
  subGroups         SubGroup[] @relation("ChurchSubGroups")
  teams             Team[]
  duties            Duty[]     // 직책
  positions         ChurchPosition[]   // 직분 목록 (예: ["목사", "집사"])
  creations         Creation[]
  events            Event[]    @relation("ChurchEvents")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ChurchPosition {
  id        String  @id @default(uuid())
  name      String
  churchId  String
  church    Church  @relation(fields: [churchId], references: [id])
}

model Group {
  id            String    @id @default(uuid())
  name          String
  churchId      String
  church        Church    @relation(fields: [churchId], references: [id])
  users         User[]    @relation("UserGroups")
  subGroups     SubGroup[]
  events        Event[]   @relation("GroupEvents")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SubGroup {
  id            String    @id @default(uuid())
  name          String
  groupId       String
  group         Group     @relation(fields: [groupId], references: [id])
  churchId      String
  church        Church    @relation("ChurchSubGroups", fields: [churchId], references: [id])
  users         User[]    @relation("UserSubGroups")
  events        Event[]   @relation("SubGroupEvents")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Team {
  id            String    @id @default(uuid())
  name          String
  churchId      String
  church        Church    @relation(fields: [churchId], references: [id])
  users         User[]    @relation("UserTeams")
  events        Event[]   @relation("TeamEvents")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Duty {
  id            String    @id @default(uuid())
  name          String
  churchId      String
  church        Church    @relation(fields: [churchId], references: [id])
  users         User[]    @relation("UserDuties")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Creation {
  id            String    @id @default(uuid())
  title         String
  description   String
  type          CreationType
  fileUrl       String
  audioUrl      String?
  price         Float?
  isPublic      Boolean   @default(false)
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])
  churchId      String
  church        Church    @relation(fields: [churchId], references: [id])
  purchases     Purchase[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Purchase {
  id            String    @id @default(uuid())
  creationId    String
  creation      Creation  @relation(fields: [creationId], references: [id])
  buyerId       String
  buyer         User      @relation(fields: [buyerId], references: [id])
  amount        Float
  creatorProfit Float
  churchProfit  Float
  serviceFee    Float
  createdAt     DateTime  @default(now())
}

model ChurchApplication {
  id                String    @id @default(uuid())
  churchName        String
  superAdminEmail   String
  password          String
  country           String
  city              String
  region            String
  address           String
  contactName       String
  contactPhone      String
  contactGender     String
  contactBirthDate  DateTime
  contactImage      String?
  churchPhone       String
  buildingImage     String?
  plan              Plan
  state             ChurchState @default(PENDING)
  rejectionReason   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Attendance {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation("UserAttendance", fields: [userId], references: [id])
  date          DateTime
  checkedById   String
  checkedBy     User      @relation("CheckedBy", fields: [checkedById], references: [id])
  createdAt     DateTime  @default(now())
}

model EventAttendance {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model UserEventLabel {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserEventLabel")
  label     String
  priority  Int      @default(1) // 중요도 (1~5 등급, 기본값 1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, label]) // 사용자별 라벨 중복 방지
}

model Event {
  id            String    @id @default(uuid())
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  status        EventStatus @default(SCHEDULED)
  recurrence    String? // 예: "WEEKLY", "MONTHLY" 등 반복 일정 시 사용
  notifyBefore  Int? // 알림 기능: 알림 전송 시간(분 단위, 예: 30)
  attendees     EventAttendance[]
  churchId      String
  church        Church    @relation("ChurchEvents", fields: [churchId], references: [id])
  groupId       String?
  group         Group?    @relation("GroupEvents", fields: [groupId], references: [id])
  subGroupId    String?
  subGroup      SubGroup? @relation("SubGroupEvents", fields: [subGroupId], references: [id])
  teamId        String?
  team          Team?     @relation("TeamEvents", fields: [teamId], references: [id])
  roles         Role[]
  creatorId     String
  creator       User      @relation("EventCreator", fields: [creatorId], references: [id])
  label         String?   // 새로 추가: 라벨 (예: "High", "Medium", "Low")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum Role {
  VISITOR
  GENERAL
  ADMIN
  SUB_ADMIN
  SUPER_ADMIN
  CHECKER
  MASTER
}

enum Plan {
  FREE
  SMART
  ENTERPRISE
}

enum CreationType {
  SCORE
  ILLUSTRATION
}

enum ChurchState {
  PENDING
  APPROVED
  REJECTED
}

enum UserState {
  PENDING
  APPROVED
  REJECTED
}