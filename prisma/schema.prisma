generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  name          String
  birthDate     DateTime
  phone         String?
  kakaoId       String?    @unique
  lineId        String?    @unique
  address       String?
  country       String?
  region        String?
  city          String?
  gender        String
  profileImage  String?
  role          Role       @default(GENERAL)
  churchId      String?
  church        Church?    @relation(fields: [churchId], references: [id])
  groups        Group[]    @relation("UserGroups")
  subGroups     SubGroup[] @relation("UserSubGroups")
  teams         Team[]     @relation("UserTeams")
  duties        Duty[]     @relation("UserDuties") // 직책
  position      String?    // 직분 (예: 목사, 집사)
  creations     Creation[]
  purchases     Purchase[]
  state         UserState  @default(APPROVED)
  rejectionReason String?
  attendances   Attendance[] @relation("UserAttendance")
  checkedAttendances Attendance[] @relation("CheckedBy")
  createdEvents Event[]    @relation("EventCreator")
  attendees     EventAttendance[] // 이벤트 참여자
  userEventLabels UserEventLabel[] @relation("UserEventLabel") // 추가: 사용자별 라벨 관계
  scoreLikes    ScoreLike[]  @relation("UserScoreLikes") // 추가: ScoreLike 관계
  scoreComments ScoreComment[] @relation("UserScoreComments") // 추가: ScoreComment 관계
  setlists        Setlist[]        @relation("SetlistCreator")       // 추가됨
  setlistShares   SetlistShare[]   @relation("UserSetlistShares")    // 추가됨
  setlistComments SetlistComment[] @relation("UserSetlistComments")
  passwordResetTokens PasswordResetToken[] @relation("UserPasswordResetTokens")
  emailVerificationToken String?   @unique // 이메일 인증 토큰
  emailVerified      Boolean   @default(false) // 이메일 인증 여부
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Church {
  id                String    @id @default(uuid())
  name              String
  country           String
  city              String
  region            String
  address           String
  phone             String
  logo              String? // buildingImage에서 logo로 변경
  subscriptions     Subscription[]
  usageLimits       UsageLimit[] // 추가: UsageLimit과의 관계
  state             ChurchState @default(PENDING)
  users             User[]
  groups            Group[]
  subGroups         SubGroup[] @relation("ChurchSubGroups")
  teams             Team[]
  duties            Duty[]     // 직책
  positions         ChurchPosition[]   // 직분 목록 (예: ["목사", "집사"])
  creations         Creation[]
  events            Event[]    @relation("ChurchEvents")
  setlists          Setlist[]        @relation("ChurchSetlists")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ChurchPosition {
  id        String  @id @default(uuid())
  name      String
  churchId  String
  church    Church  @relation(fields: [churchId], references: [id])
}

model Group {
  id            String    @id @default(uuid())
  name          String
  churchId      String
  church        Church    @relation(fields: [churchId], references: [id])
  users         User[]    @relation("UserGroups")
  subGroups     SubGroup[]
  events        Event[]   @relation("GroupEvents")
  setlistShares SetlistShare[]   @relation("GroupSetlistShares")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SubGroup {
  id            String    @id @default(uuid())
  name          String
  groupId       String
  group         Group     @relation(fields: [groupId], references: [id])
  churchId      String
  church        Church    @relation("ChurchSubGroups", fields: [churchId], references: [id])
  users         User[]    @relation("UserSubGroups")
  events        Event[]   @relation("SubGroupEvents")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Team {
  id            String    @id @default(uuid())
  name          String
  churchId      String
  church        Church    @relation(fields: [churchId], references: [id])
  users         User[]    @relation("UserTeams")
  events        Event[]   @relation("TeamEvents")
  setlistShares SetlistShare[]   @relation("TeamSetlistShares")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Duty {
  id            String    @id @default(uuid())
  name          String
  churchId      String
  church        Church    @relation(fields: [churchId], references: [id])
  users         User[]    @relation("UserDuties")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Creation {
  id                String         @id @default(uuid())
  title             String
  titleEn           String?        // 영어 제목
  titleJa           String?        // 일본어 제목
  description       String?
  type              CreationType
  fileUrl           String         // 악보 파일 URL (jpg/pdf)
  thumbnailUrl      String?        // 섬네일 이미지 URL
  audioUrl          String?        // 오디오 파일 URL
  price             Float?         // 판매 가격
  tempo             Int?           // 템포
  key               String?         // 코드 키 (예: "C Major")
  referenceUrls     String[]       // 참고 URL 배열
  lyrics            String?        // 가사 (한국어)
  lyricsEn          String?        // 가사 (영어)
  lyricsJa          String?        // 가사 (일본어)
  composer          String?        // 작곡가
  lyricist          String?        // 작사자
  saleStartDate     DateTime?      // 판매 시작일
  saleEndDate       DateTime?      // 판매 종료일
  genre             Genre?        　// 장르 필드
  isPublic          Boolean        @default(false) // 다른 교회 공유 여부
  isForSale         Boolean        @default(false) // 판매 허가 여부
  isOriginal        Boolean        @default(false) // 자작곡 여부
  isOpen            Boolean        @default(true) // 공개 여부
  creatorId         String
  creator           User           @relation(fields: [creatorId], references: [id])
  churchId          String
  church            Church         @relation(fields: [churchId], references: [id])
  purchases         Purchase[]
  likes             ScoreLike[]    // 좋아요
  comments          ScoreComment[] // 댓글
  setlistScores     SetlistScore[]   @relation("CreationSetlistScores")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model ScoreLike {
  id            String    @id @default(uuid())
  creationId    String
  creation      Creation  @relation(fields: [creationId], references: [id])
  userId        String
  user          User      @relation("UserScoreLikes", fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  @@unique([creationId, userId])
}

model ScoreComment {
  id            String    @id @default(uuid())
  creationId    String
  creation      Creation  @relation(fields: [creationId], references: [id])
  userId        String
  user          User      @relation("UserScoreComments", fields: [userId], references: [id])
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Purchase {
  id            String    @id @default(uuid())
  creationId    String
  creation      Creation  @relation(fields: [creationId], references: [id])
  buyerId       String
  buyer         User      @relation(fields: [buyerId], references: [id])
  amount        Float
  creatorProfit Float
  churchProfit  Float
  serviceFee    Float
  createdAt     DateTime  @default(now())
}

model ChurchApplication {
  id                String    @id @default(uuid())
  churchName        String
  superAdminEmail   String
  password          String
  country           String
  city              String
  region            String
  address           String
  contactName       String
  contactPhone      String
  contactGender     String
  contactBirthDate  DateTime
  contactImage      String?
  churchPhone       String
  logo              String? // buildingImage에서 logo로 변경
  plan              Plan
  state             ChurchState @default(PENDING)
  rejectionReason   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Attendance {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation("UserAttendance", fields: [userId], references: [id])
  date          DateTime
  checkedById   String
  checkedBy     User      @relation("CheckedBy", fields: [checkedById], references: [id])
  createdAt     DateTime  @default(now())
}

model EventAttendance {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model UserEventLabel {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserEventLabel")
  label     String
  priority  Int      @default(1) // 중요도 (1~5 등급, 기본값 1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, label]) // 사용자별 라벨 중복 방지
}

model Event {
  id            String    @id @default(uuid())
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  status        EventStatus @default(SCHEDULED)
  recurrence    String? // 예: "WEEKLY", "MONTHLY" 등 반복 일정 시 사용
  notifyBefore  Int? // 알림 기능: 알림 전송 시간(분 단위, 예: 30)
  attendees     EventAttendance[]
  churchId      String
  church        Church    @relation("ChurchEvents", fields: [churchId], references: [id])
  groupId       String?
  group         Group?    @relation("GroupEvents", fields: [groupId], references: [id])
  subGroupId    String?
  subGroup      SubGroup? @relation("SubGroupEvents", fields: [subGroupId], references: [id])
  teamId        String?
  team          Team?     @relation("TeamEvents", fields: [teamId], references: [id])
  roles         Role[]
  creatorId     String
  creator       User      @relation("EventCreator", fields: [creatorId], references: [id])
  label         String?   // 새로 추가: 라벨 (예: "High", "Medium", "Low")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Setlist {
  id            String           @id @default(uuid())
  title         String
  date          DateTime
  description   String?
  fileUrl       String?          // 병합된 PDF URL 저장
  creatorId     String
  creator       User             @relation("SetlistCreator", fields: [creatorId], references: [id])
  churchId      String
  church        Church           @relation("ChurchSetlists", fields: [churchId], references: [id])
  scores        SetlistScore[]
  shares        SetlistShare[]
  comments      SetlistComment[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model SetlistScore {
  id          String    @id @default(uuid())
  setlistId   String
  setlist     Setlist   @relation(fields: [setlistId], references: [id])
  creationId  String
  creation    Creation  @relation("CreationSetlistScores", fields: [creationId], references: [id])
  order       Int
  selectedReferenceUrl String? // 선택된 YouTube URL 저장
  createdAt   DateTime  @default(now())
}

model SetlistShare {
  id          String    @id @default(uuid())
  setlistId   String
  setlist     Setlist   @relation(fields: [setlistId], references: [id])
  groupId     String?
  group       Group?    @relation("GroupSetlistShares", fields: [groupId], references: [id])
  teamId      String?
  team        Team?     @relation("TeamSetlistShares", fields: [teamId], references: [id])
  userId      String?
  user        User?     @relation("UserSetlistShares", fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
}

model SetlistComment {
  id          String    @id @default(uuid())
  setlistId   String
  setlist     Setlist   @relation(fields: [setlistId], references: [id])
  userId      String
  user        User      @relation("UserSetlistComments", fields: [userId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserPasswordResetTokens", fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Subscription {
  id                           String       @id @default(uuid())
  churchId                     String
  church                       Church       @relation(fields: [churchId], references: [id])
  stripeCustomerId             String?   // Stripe 고객 ID
  stripeCheckoutSessionId      String? // Checkout 세션 ID
  stripeSubscriptionId         String? // 실제 구독 ID
  plan                         Plan         @default(FREE)
  status                       SubscriptionStatus @default(ACTIVE) // 구독 상태
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
}

model UsageLimit {
  id            String       @id @default(uuid())
  churchId      String
  church        Church       @relation(fields: [churchId], references: [id])
  userCount     Int          @default(0) // 등록된 성도 수
  weeklySetlistCount Int     @default(0) // 주간 세트리스트 생성 횟수
  monthlySetlistCount Int    @default(0) // 월간 세트리스트 생성 횟수
  scoreCount    Int          @default(0) // 업로드된 악보 수
  resetAt       DateTime?    // 주간/월간 리셋 시각
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum Role {
  VISITOR
  GENERAL
  ADMIN
  SUB_ADMIN
  SUPER_ADMIN
  CHECKER
  MASTER
}

enum Plan {
  FREE
  SMART
  ENTERPRISE
}

enum CreationType {
  SCORE
  ILLUSTRATION
  ORIGINAL_SCORE // 자작곡 악보
}

enum ChurchState {
  PENDING
  APPROVED
  REJECTED
}

enum UserState {
  PENDING
  APPROVED
  REJECTED
}

enum Genre {
  BRIGHT
  CALM
  DARK
  DRAMATIC
  FUNKY
  HAPPY
  INSPIRATIONAL
  ROMANTIC
  SAD
}